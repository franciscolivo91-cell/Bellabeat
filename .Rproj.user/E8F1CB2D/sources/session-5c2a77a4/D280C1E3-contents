---
title: "BellaBeat case"
author: "Francisco Olivo"
date: "`r Sys.Date()`"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

### Summary

Bellabeat is a high-tech manufacturer of health-focused products for women. Collecting data on activity, sleep, stress, and reproductive health has allowed Bellabeat to empower women with knowledge about their own health and habits. Since it was founded in 2013, Bellabeat has grown rapidly and quickly positioned itself as a tech-driven wellness company for women.

### Identifying the business task:

Bellabeat wants me to analyze other smart tracking devices data, get insights, and uncover growth opportunities in the smart wellness device industry in order to help to decide the marketing strategy for the company.


### About the data 

A specific public dataset was pointed: [FitBit Fitness Tracker Data](https://www.kaggle.com/datasets/arashnic/fitbit) (CC0: Public Domain) This Kaggle data set contains personal fitness tracker from 30 fitbit users.


### First encounter

Given the size, the first approach was to open the .csv files with **GoogleSheets** and get to know the data. 
The "dailyActivity_merged" document consolidates many of the other documents, taking days as a timing base.
The interesting ones to work with will be "dailyActivity, weightLogInfo, and sleepDay"


Findings:

* The data set contains information of 35 unique IDs over the course of 62 days.
* The Data Set informs that 30 people gave permission to share their data, but 35 IDs where found. This inconsistency affects the reliability of the data and warns about possible collection of data without authorization.
* The sample size is small to consider it a representation of the population. 
* The data does not have demographic information like age, or sex, which could bring sampling bias. Furthermore, the sex is a crucial characteristic for this study.
* The data is from 2016, so it is not current information.

As a complement to the dataset, a [Data Dictionary.pdf](https://www.fitabase.com/media/1930/fitabasedatadictionary102320.pdf) document for the tracker device was found, and it played a big role interpreting the dimension of each datatype.

### Manipulation

With two set of files for different time periods, it was decided to combine the two dailyActivity documents
The name of the columns describing distances was changed to add "[km]", and Calories was changed for "Calories [kcal]"

The weightLogInfo were also combined into a single document using **Google Sheets**. The "date" column has both date and time, it is convenient to have it separated:

#### Loading .csv 

```{r echo=TRUE, results='hide', message=FALSE, warning=FALSE}
install.packages("tidyverse")
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
library(scales)
DailyActivity <- read_csv("dailyActivity_combined.csv")
Weight <- read_csv("weightLogInfo_combined.csv")
```


Now to separate the date and the time in the Weight dataframe:

```{r results='hide'}
Weight$DateTime <- as.POSIXct(Weight$Date, format = "%m/%d/%Y %I:%M:%S %p")
Weight$Date <- as.Date(Weight$DateTime)
Weight$Time  <- format(Weight$DateTime, format = "%H:%M:%S")
head(Weight)
```


The sleepDay document only contains information for the second half of the period of study. It will be beneficial to use the data from the minuteSleep documents, and translate it to daily basis. 

```{r results='hide'}
MinuteSleep1 <- read_csv("minuteSleep_merged_01.csv")
MinuteSleep2 <- read_csv("minuteSleep_merged.csv")
MinuteSleep <- rbind(MinuteSleep1, MinuteSleep2)
```

Reformatting the Date and time:

```{r results='hide'}
MinuteSleep$DateTime <- as.POSIXct(MinuteSleep$date, format = "%m/%d/%Y %I:%M:%S %p")
MinuteSleep$Time <- format(MinuteSleep$DateTime, format = "%H:%M:%S")
MinuteSleep$Date <- as.Date(MinuteSleep$DateTime)
MinuteSleep$date <- NULL
```

Now, re configuring the data to have the same format as the given sleepDay document

```{r results='hide'}
DailySleep <- MinuteSleep %>%
group_by(Id, Date) %>%
summarise(
  TotalSleepRecords = n_distinct(logId),
  TotalMinutesAsleep = sum(value %in% c(1)),
  TotalMinutesInBed = sum(value %in% c(1, 2, 3)),
  .groups = "drop"
  )
```

Loading the given document, and comparing a sample of the two data frames in the same period o time to check consistency

```{r}
SleepDay <- read_csv("sleepDay_merged.csv")
filter(DailySleep, Id == 1503960366)
filter(DailySleep, Id == 1503960366, Date > 2016-04-16)
```

Now looking for duplicates:

```{r}
sum(duplicated(DailyActivity))
sum(duplicated(DailySleep))
sum(duplicated(Weight))
```

The data frame "Weight" has duplicates. Revising the actual duplicates to understand their nature

```{r echo=FALSE}
Weight[duplicated(Weight) | duplicated(Weight, fromLast=TRUE), ]
```

It was found that in both cases, one of the entries was manual and the other was automatic. 

```{r}
WeightClean <- Weight[!duplicated(Weight),]
sum(duplicated(WeightClean))
```

### Analysing the Data

An issue with the spaces in the columns names was found. To eliminate them:

```{r}
names(DailyActivity) <- gsub(" ", "", names(DailyActivity))
```

An additional column is added to have the total time in Hours:
```{r}
DailyActivity <- DailyActivity %>%
mutate(TotalHours = Totaltime / 60)
```

It was found that the DailyActivity dataframe has many rows where all the elements are zero, adding no information at all. A new dataframe is created without these elements 

```{r}
DailyActivityClean <- DailyActivity %>%
  filter(!(TotalSteps == "0" & `TotalDistance[km]`=="0" & `TrackerDistance[km]`=="0" & `LoggedActivitiesDistance[km]` =="0" & `VeryActiveDistance[km]`=="0" & `ModeratelyActiveDistance[km]`=="0" & `LightActiveDistance[km]`=="0" & `SedentaryActiveDistance[km]`=="0" & VeryActiveMinutes=="0" & FairlyActiveMinutes=="0" & LightlyActiveMinutes=="0"))
```

After this, its known the percentage of information that was cleaned was:

```{r}
percent(1 - nrow(DailyActivityClean) / nrow(DailyActivity),accuracy = 0.01)
```

The amount of steps is classified according to a publication in [NationalGeographic](https://www.nationalgeographicla.com/ciencia/2024/02/caminar-es-bueno-para-la-salud-cuantos-pasos-debe-dar-una-persona-al-dia) as follows:

* Sedentary: less than 5000 steps a day.
* Lightly active: Between 5000 and 7499 steps a day.
* Moderately active: Between 7500 and 9999 steps a day.
* Active: Between 10000 and 12499 steps a day
* Extremely active - More than 12500 steps a day.


Lets classify the dataframe according to the average steps taken everyday for each participant:

```{r}
AverageSteps <- DailyActivityClean %>%
     group_by(Id) %>%
     summarise(AverageSteps = mean(TotalSteps))
```

```{r}
AverageSteps <- AverageSteps %>%
  mutate(
  Category = case_when(
             AverageSteps < 5000 ~ "Sedentary",
             AverageSteps < 7500 ~ "Lightly active",
             AverageSteps < 10000 ~ "Moderately active",
             AverageSteps < 12500 ~ "Active",
             TRUE ~ "Extremely active"
         )
     )
```


```{r echo=FALSE}
StepsCategories <- AverageSteps %>%
          count(Category) %>%
          arrange(desc(n)) %>%
          mutate(
                  Percentage = n / sum(n)*100,
                  Accum = cumsum(Percentage),
                  Label = Category)
```

### About the weight information:

According to the [U.S. Centers for Disease Control and Prevention](https://www.cdc.gov/bmi/adult-calculator/bmi-categories.html), there are 4 major categories for BMI in adults:

* Less than 18.5 -> Underweight 
* 18.5 to less than 25 -> Healthy Weight 
* 25 to less than 30 -> Overweight
* 30 or greater -> Obesity 

Applied to our case, the distribution is:

```{r}
n_distinct(WeightClean$Id)
```


```{r}
AverageBMI <- WeightClean %>% 
     group_by(Id) %>%
     summarise(AverageBMI = mean(BMI))
```


```{r}
AverageBMI <- AverageBMI %>%
     mutate(
         Category = case_when(
             AverageBMI < 18.5 ~ "Underweight",
             AverageBMI < 25 ~ "Healthy weight",
             AverageBMI < 30 ~ "Overweight",
             TRUE ~ "Obesity"
          )
      )
```



```{r}
PieChartBMI <- AverageBMI %>%
    group_by(Category) %>%
    summarise(Id = n()) %>%
    mutate(Percentage = Id / sum(Id))
```

```{r}
ggplot(PieChartBMI, aes(x = "", y = Percentage, fill = Category)) +
    geom_bar(stat = "identity", width = 1) +
    coord_polar("y", start = 0) +
    geom_text(aes(label = percent(Percentage)),
              position = position_stack(vjust = 0.5), size = 4) +
    labs(title = "Participants for BMI") +
    theme_void() +
    scale_fill_brewer(palette = "Blues")
```


Device Use

How is the tracking devide used?



```{r echo=FALSE}

Roof <- 12

ggplot(StepsCategories, aes(x = reorder(Category, -n), y = n)) +
     geom_bar(stat = "identity", fill = "steelblue") +
     geom_line(aes(y = Accum * Roof, group = 1), color = "green", size = 1) +
     geom_point(aes(y = Accum * Roof), color = "green", size = 2) +
     scale_y_continuous(
         limits = c(0, Roof),
         breaks = seq(0, Roof, by = 2),
         sec.axis = sec_axis(~ . / Roof, name = "Accumulated percentage", labels = scales::percent)
     ) +
     labs(
         title = "Pareto Diagram - Activity Category",
         x = "",
         y = "Participants"
     ) +
     theme_minimal() +
     theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

How does this compare to the distribution of time?


```{r}

```



For how long is a tracking device used?




Se usa 24 horas?
Peso de la muestra

Desviación máxima de la medida
Dias de la semana
Numero de pasos por ID por dia de la semana




Esto por aqui, pero no se
ggplot(MeetWHOId, aes(x = reorder(as.factor(Id), -MetWeeks), y = MetWeeks)) +
+     geom_bar(stat = "identity", fill = "seagreen") +
+     labs(
+         title = "Weeks that meet the WHO recommendation",
+         x = "Participant´s ID",
+         y = "Met Weeks"
+     ) +
+     theme_minimal() 